// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen should be able to generate codegen 1`] = `
"type MemberTableRow = {
  id: string;
  role: { id: string; displayField: string };
  email: string;
  toDo: ToDoTableRow[];
  totalTask: number;
  totalPoint: number;
  totalHardTask: number;
  createTask: action;
};

type ToDoTableRow = {
  id: string;
  task: string;
  description: string;
  done: boolean;
  points: number;
  deadline: date;
  difficulty: select;
  person: PersonTableRow[];
  role: lookup;
  attachment: file;
  timeAllocation: formula;
};

type MemberDefaultViewViewRow = {
  read: {
    id: string;
    email: string;
    role: { id: string; displayField: string };
    createTask: action;
  };
  write: {
    email: string;
  };
  params: {};
};

type ToDoDefaultViewViewRow = {
  read: {
    id: string;
    task: string;
    done: boolean;
    points: number;
    deadline: date;
    difficulty: select;
    person: PersonTableRow[];
    role: lookup;
    attachment: file;
    timeAllocation: formula;
  };
  write: {
    task: string;
    done: boolean;
    points: number;
    deadline: date;
    difficulty: select;
    person: string[];
    attachment: file;
  };
  params: {
    \\"$by.points\\"?: \\"desc\\";
  };
};

type TestViewRow = {
  read: {
    id: string;
    task: string;
    description: string;
  };
  write: {
    task: string;
    description: string;
  };
  params: {};
};

type ToDoViewRow = {
  read: {
    id: string;
    task: string;
    description: string;
    done: boolean;
    points: number;
    deadline: date;
  };
  write: {
    task: string;
    description: string;
    done: boolean;
    points: number;
    deadline: date;
  };
  params: {};
};

type DoneViewRow = {
  read: {
    id: string;
    task: string;
    description: string;
    done: boolean;
    points: number;
    deadline: date;
  };
  write: {
    task: string;
    description: string;
    done: boolean;
    points: number;
    deadline: date;
  };
  params: {};
};

type ReisTaskViewRow = {
  read: {
    id: string;
    task: string;
    description: string;
    done: boolean;
    points: number;
    deadline: date;
    difficulty: select;
    person: PersonTableRow[];
    role: lookup;
    attachment: file;
    timeAllocation: formula;
  };
  write: {
    task: string;
    description: string;
    done: boolean;
    points: number;
    deadline: date;
    difficulty: select;
    person: string[];
    attachment: file;
  };
  params: {
    timeAllocation?: string;
  };
};

type MemberMetricViewRow = {
  read: {
    id: string;
    email: string;
    role: { id: string; displayField: string };
    totalTask: number;
    totalPoint: number;
    totalHardTask: number;
  };
  write: {
    email: string;
  };
  params: {
    email: string;
  };
};

export type QoreProjectSchema = {
  memberDefaultView: MemberDefaultViewViewRow;
  toDoDefaultView: ToDoDefaultViewViewRow;
  test: TestViewRow;
  toDo: ToDoViewRow;
  done: DoneViewRow;
  reisTask: ReisTaskViewRow;
  memberMetric: MemberMetricViewRow;
};
"
`;
