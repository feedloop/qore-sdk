/* tslint:disable */
/* eslint-disable */
/**
 * Qore Engine
 * qore-engine api docs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from "./base";

/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
  /**
   *
   * @type {string}
   * @memberof InlineObject
   */
  identifier: string;
  /**
   *
   * @type {string}
   * @memberof InlineObject
   */
  role: string;
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
  /**
   *
   * @type {Array<V1MigrateOperations>}
   * @memberof InlineObject1
   */
  operations: Array<V1MigrateOperations>;
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
  /**
   *
   * @type {number}
   * @memberof InlineObject2
   */
  rollbacks: number;
}
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
  /**
   *
   * @type {Array<V1ExecuteOperations>}
   * @memberof InlineObject3
   */
  operations: Array<V1ExecuteOperations>;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse200
   */
  token: string;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
  /**
   *
   * @type {Array<InlineResponse2001Results>}
   * @memberof InlineResponse2001
   */
  results: Array<InlineResponse2001Results>;
}
/**
 *
 * @export
 * @interface InlineResponse2001Results
 */
export interface InlineResponse2001Results {
  /**
   *
   * @type {number}
   * @memberof InlineResponse2001Results
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Results
   */
  name: string;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2001Results
   */
  active: boolean;
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof InlineResponse2001Results
   */
  schema: { [key: string]: object };
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Results
   */
  up: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Results
   */
  down: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Results
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof InlineResponse2001Results
   */
  createdAt?: number;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2002
   */
  ok: boolean;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
  /**
   *
   * @type {Array<InlineResponse2003Items>}
   * @memberof InlineResponse2003
   */
  items: Array<InlineResponse2003Items>;
  /**
   *
   * @type {InlineResponse2003Pagination}
   * @memberof InlineResponse2003
   */
  pagination: InlineResponse2003Pagination;
}
/**
 *
 * @export
 * @interface InlineResponse2003Items
 */
export interface InlineResponse2003Items {
  /**
   *
   * @type {number}
   * @memberof InlineResponse2003Items
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2003Items
   */
  name: string;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2003Items
   */
  active: boolean;
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof InlineResponse2003Items
   */
  schema: { [key: string]: object };
  /**
   *
   * @type {string}
   * @memberof InlineResponse2003Items
   */
  up: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2003Items
   */
  down: string;
  /**
   *
   * @type {number}
   * @memberof InlineResponse2003Items
   */
  createdAt: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2003Items
   */
  description?: string | null;
}
/**
 *
 * @export
 * @interface InlineResponse2003Pagination
 */
export interface InlineResponse2003Pagination {
  /**
   *
   * @type {number}
   * @memberof InlineResponse2003Pagination
   */
  limit?: number;
  /**
   *
   * @type {number}
   * @memberof InlineResponse2003Pagination
   */
  offset?: number;
  /**
   *
   * @type {number}
   * @memberof InlineResponse2003Pagination
   */
  total?: number;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
  /**
   *
   * @type {{ [key: string]: Array<{ [key: string]: object; }>; }}
   * @memberof InlineResponse2004
   */
  results: { [key: string]: Array<{ [key: string]: object }> };
}
/**
 *
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
  /**
   *
   * @type {InlineResponse2003Pagination}
   * @memberof InlineResponse2005
   */
  pagination: InlineResponse2003Pagination;
  /**
   *
   * @type {Array<InlineResponse2005Items>}
   * @memberof InlineResponse2005
   */
  items: Array<InlineResponse2005Items>;
}
/**
 *
 * @export
 * @interface InlineResponse2005Items
 */
export interface InlineResponse2005Items {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2005Items
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2005Items
   */
  name: string;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2005Items
   */
  deletionProtection: boolean;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2005Items
   */
  isHidden: boolean;
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof InlineResponse2005Items
   */
  createdAt: { [key: string]: object };
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof InlineResponse2005Items
   */
  updatedAt: { [key: string]: object };
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof InlineResponse2005Items
   */
  columns: { [key: string]: object };
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof InlineResponse2005Items
   */
  view: { [key: string]: object };
}
/**
 *
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
  /**
   *
   * @type {Array<InlineResponse2006Tables>}
   * @memberof InlineResponse2006
   */
  tables: Array<InlineResponse2006Tables>;
}
/**
 *
 * @export
 * @interface InlineResponse2006Columns
 */
export interface InlineResponse2006Columns {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006Columns
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006Columns
   */
  type: string;
  /**
   *
   * @type {InlineResponse2006References}
   * @memberof InlineResponse2006Columns
   */
  references?: InlineResponse2006References | null;
}
/**
 *
 * @export
 * @interface InlineResponse2006Permissions
 */
export interface InlineResponse2006Permissions {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006Permissions
   */
  action: string;
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof InlineResponse2006Permissions
   */
  condition: { [key: string]: object };
}
/**
 *
 * @export
 * @interface InlineResponse2006References
 */
export interface InlineResponse2006References {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006References
   */
  targetTable: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006References
   */
  column: string;
}
/**
 *
 * @export
 * @interface InlineResponse2006Roles
 */
export interface InlineResponse2006Roles {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006Roles
   */
  name: string;
  /**
   *
   * @type {Array<InlineResponse2006Permissions>}
   * @memberof InlineResponse2006Roles
   */
  permissions: Array<InlineResponse2006Permissions>;
}
/**
 *
 * @export
 * @interface InlineResponse2006Tables
 */
export interface InlineResponse2006Tables {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006Tables
   */
  tableName: string;
  /**
   *
   * @type {Array<InlineResponse2006Columns>}
   * @memberof InlineResponse2006Tables
   */
  columns: Array<InlineResponse2006Columns>;
  /**
   *
   * @type {Array<InlineResponse2006Roles>}
   * @memberof InlineResponse2006Tables
   */
  roles: Array<InlineResponse2006Roles>;
}
/**
 *
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
  /**
   *
   * @type {Array<{ [key: string]: object; }>}
   * @memberof InlineResponse2007
   */
  items: Array<{ [key: string]: object }>;
  /**
   *
   * @type {InlineResponse2007Pagination}
   * @memberof InlineResponse2007
   */
  pagination: InlineResponse2007Pagination;
}
/**
 *
 * @export
 * @interface InlineResponse2007Pagination
 */
export interface InlineResponse2007Pagination {
  /**
   *
   * @type {number}
   * @memberof InlineResponse2007Pagination
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof InlineResponse2007Pagination
   */
  total: number;
}
/**
 *
 * @export
 * @interface V1ExecuteOperations
 */
export interface V1ExecuteOperations {
  /**
   *
   * @type {string}
   * @memberof V1ExecuteOperations
   */
  operation: V1ExecuteOperationsOperationEnum;
  /**
   *
   * @type {object}
   * @memberof V1ExecuteOperations
   */
  instruction: object;
}

/**
 * @export
 * @enum {string}
 */
export enum V1ExecuteOperationsOperationEnum {
  Delete = "Delete",
  Insert = "Insert",
  Select = "Select",
  Update = "Update",
  AddRelation = "AddRelation",
  RemoveRelation = "RemoveRelation"
}

/**
 *
 * @export
 * @interface V1MigrateOperations
 */
export interface V1MigrateOperations {
  /**
   *
   * @type {string}
   * @memberof V1MigrateOperations
   */
  operation: V1MigrateOperationsOperationEnum;
  /**
   *
   * @type {string}
   * @memberof V1MigrateOperations
   */
  resource: V1MigrateOperationsResourceEnum;
  /**
   *
   * @type {object}
   * @memberof V1MigrateOperations
   */
  migration: object;
}

/**
 * @export
 * @enum {string}
 */
export enum V1MigrateOperationsOperationEnum {
  Alter = "Alter",
  Create = "Create",
  Drop = "Drop"
}
/**
 * @export
 * @enum {string}
 */
export enum V1MigrateOperationsResourceEnum {
  Column = "Column",
  ManyToManyRelation = "ManyToManyRelation",
  OneToManyRelation = "OneToManyRelation",
  Permission = "Permission",
  Role = "Role",
  Table = "Table",
  View = "View"
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorize: async (
      inlineObject: InlineObject,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inlineObject' is not null or undefined
      assertParamExists("authorize", "inlineObject", inlineObject);
      const localVarPath = `/v1/authorize`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inlineObject,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} table
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRow: async (
      table: string,
      body: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'table' is not null or undefined
      assertParamExists("createRow", "table", table);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("createRow", "body", body);
      const localVarPath = `/v1/table/{table}`.replace(
        `{${"table"}}`,
        encodeURIComponent(String(table))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRow: async (
      table: string,
      rowID: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'table' is not null or undefined
      assertParamExists("deleteRow", "table", table);
      // verify required parameter 'rowID' is not null or undefined
      assertParamExists("deleteRow", "rowID", rowID);
      const localVarPath = `/v1/table/{table}/row/{rowID}`
        .replace(`{${"table"}}`, encodeURIComponent(String(table)))
        .replace(`{${"rowID"}}`, encodeURIComponent(String(rowID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    execute: async (
      inlineObject3: InlineObject3,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inlineObject3' is not null or undefined
      assertParamExists("execute", "inlineObject3", inlineObject3);
      const localVarPath = `/v1/execute`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inlineObject3,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMigrations: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/migrations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {Array<string>} [populate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRow: async (
      table: string,
      rowID: string,
      populate?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'table' is not null or undefined
      assertParamExists("getRow", "table", table);
      // verify required parameter 'rowID' is not null or undefined
      assertParamExists("getRow", "rowID", rowID);
      const localVarPath = `/v1/table/{table}/row/{rowID}`
        .replace(`{${"table"}}`, encodeURIComponent(String(table)))
        .replace(`{${"rowID"}}`, encodeURIComponent(String(rowID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (populate) {
        localVarQueryParameter["populate"] = populate;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} table
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {Array<string>} [populate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRows: async (
      table: string,
      limit?: number,
      offset?: number,
      populate?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'table' is not null or undefined
      assertParamExists("getRows", "table", table);
      const localVarPath = `/v1/table/{table}`.replace(
        `{${"table"}}`,
        encodeURIComponent(String(table))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (populate) {
        localVarQueryParameter["populate"] = populate;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/schema`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTables: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/tables`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    migrate: async (
      inlineObject1: InlineObject1,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inlineObject1' is not null or undefined
      assertParamExists("migrate", "inlineObject1", inlineObject1);
      const localVarPath = `/v1/migrate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inlineObject1,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rollback: async (
      inlineObject2: InlineObject2,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inlineObject2' is not null or undefined
      assertParamExists("rollback", "inlineObject2", inlineObject2);
      const localVarPath = `/v1/rollback`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inlineObject2,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRow: async (
      table: string,
      rowID: string,
      requestBody?: { [key: string]: object },
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'table' is not null or undefined
      assertParamExists("updateRow", "table", table);
      // verify required parameter 'rowID' is not null or undefined
      assertParamExists("updateRow", "rowID", rowID);
      const localVarPath = `/v1/table/{table}/row/{rowID}`
        .replace(`{${"table"}}`, encodeURIComponent(String(table)))
        .replace(`{${"rowID"}}`, encodeURIComponent(String(rowID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1HealthGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/health`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1InspectGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/inspect`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "x-qore-engine-admin-secret",
        configuration
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authorize(
      inlineObject: InlineObject,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse200>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authorize(
        inlineObject,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} table
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRow(
      table: string,
      body: object,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRow(
        table,
        body,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRow(
      table: string,
      rowID: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRow(
        table,
        rowID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async execute(
      inlineObject3: InlineObject3,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2004>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.execute(
        inlineObject3,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMigrations(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2003>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMigrations(
        limit,
        offset,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {Array<string>} [populate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRow(
      table: string,
      rowID: string,
      populate?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<{ [key: string]: object }>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRow(
        table,
        rowID,
        populate,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} table
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {Array<string>} [populate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRows(
      table: string,
      limit?: number,
      offset?: number,
      populate?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2007>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRows(
        table,
        limit,
        offset,
        populate,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSchema(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2006>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSchema(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTables(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2005>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTables(
        limit,
        offset,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async migrate(
      inlineObject1: InlineObject1,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2001>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.migrate(
        inlineObject1,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rollback(
      inlineObject2: InlineObject2,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2002>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rollback(
        inlineObject2,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRow(
      table: string,
      rowID: string,
      requestBody?: { [key: string]: object },
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<{ [key: string]: object }>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRow(
        table,
        rowID,
        requestBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1HealthGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1HealthGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1InspectGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1InspectGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorize(
      inlineObject: InlineObject,
      options?: any
    ): AxiosPromise<InlineResponse200> {
      return localVarFp
        .authorize(inlineObject, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} table
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRow(table: string, body: object, options?: any): AxiosPromise<void> {
      return localVarFp
        .createRow(table, body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRow(table: string, rowID: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteRow(table, rowID, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    execute(
      inlineObject3: InlineObject3,
      options?: any
    ): AxiosPromise<InlineResponse2004> {
      return localVarFp
        .execute(inlineObject3, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMigrations(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<InlineResponse2003> {
      return localVarFp
        .getMigrations(limit, offset, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {Array<string>} [populate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRow(
      table: string,
      rowID: string,
      populate?: Array<string>,
      options?: any
    ): AxiosPromise<{ [key: string]: object }> {
      return localVarFp
        .getRow(table, rowID, populate, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} table
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {Array<string>} [populate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRows(
      table: string,
      limit?: number,
      offset?: number,
      populate?: Array<string>,
      options?: any
    ): AxiosPromise<InlineResponse2007> {
      return localVarFp
        .getRows(table, limit, offset, populate, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(options?: any): AxiosPromise<InlineResponse2006> {
      return localVarFp
        .getSchema(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTables(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<InlineResponse2005> {
      return localVarFp
        .getTables(limit, offset, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    migrate(
      inlineObject1: InlineObject1,
      options?: any
    ): AxiosPromise<InlineResponse2001> {
      return localVarFp
        .migrate(inlineObject1, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rollback(
      inlineObject2: InlineObject2,
      options?: any
    ): AxiosPromise<InlineResponse2002> {
      return localVarFp
        .rollback(inlineObject2, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} table
     * @param {string} rowID
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRow(
      table: string,
      rowID: string,
      requestBody?: { [key: string]: object },
      options?: any
    ): AxiosPromise<{ [key: string]: object }> {
      return localVarFp
        .updateRow(table, rowID, requestBody, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1HealthGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .v1HealthGet(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1InspectGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .v1InspectGet(options)
        .then(request => request(axios, basePath));
    }
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {InlineObject} inlineObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authorize(inlineObject: InlineObject, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .authorize(inlineObject, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} table
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createRow(table: string, body: object, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .createRow(table, body, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} table
   * @param {string} rowID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteRow(table: string, rowID: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteRow(table, rowID, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {InlineObject3} inlineObject3
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public execute(inlineObject3: InlineObject3, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .execute(inlineObject3, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [limit]
   * @param {number} [offset]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMigrations(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getMigrations(limit, offset, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} table
   * @param {string} rowID
   * @param {Array<string>} [populate]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRow(
    table: string,
    rowID: string,
    populate?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getRow(table, rowID, populate, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} table
   * @param {number} [limit]
   * @param {number} [offset]
   * @param {Array<string>} [populate]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRows(
    table: string,
    limit?: number,
    offset?: number,
    populate?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getRows(table, limit, offset, populate, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSchema(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getSchema(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [limit]
   * @param {number} [offset]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTables(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getTables(limit, offset, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {InlineObject1} inlineObject1
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public migrate(inlineObject1: InlineObject1, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .migrate(inlineObject1, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {InlineObject2} inlineObject2
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public rollback(inlineObject2: InlineObject2, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .rollback(inlineObject2, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} table
   * @param {string} rowID
   * @param {{ [key: string]: object; }} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateRow(
    table: string,
    rowID: string,
    requestBody?: { [key: string]: object },
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateRow(table, rowID, requestBody, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public v1HealthGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .v1HealthGet(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public v1InspectGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .v1InspectGet(options)
      .then(request => request(this.axios, this.basePath));
  }
}
